<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="4.7.2">
  <include>qfs.qft</include>
  <include>auto_master_2.qft</include>
  <variable name="dutIP">10.77.240.5</variable>
  <variable name="Stream">MPEG_480i59_384kbps_5.1.ts</variable>
  <variable name="Ethernet_Board">Board 4</variable>
  <variable name="SDI_Board">Board 3</variable>
  <variable name="input_port">4/4</variable>
  <variable name="output_port">4/4</variable>
  <variable name="inPort">57</variable>
  <variable name="outPort">113</variable>
  <variable name="SDI_input_port">3/1</variable>
  <variable name="Host_IP">10.77.240.147</variable>
  <variable name="Resolution">720x480i29.97</variable>
  <variable name="Audio_Channel">1-2</variable>
  <DependencyReference id="_22cB" reference="GUI.Dependencies.sutStarted"/>
  <TestSet disabled="true" id="_2Cw2" name="Prerequisite-Check">
    <TestCase id="_25MJ" name="Pre-requisite Check">
      <ProcedureCall id="_2D7g"
                     procedure="GUI.Pre_Requisite.Checking_for_Pre-requisite">
        <variable name="Input_Port_Active">$(output_port)</variable>
        <variable name="MPEG_enabled">$(output_port)</variable>
        <variable name="License">MPEG-4/2</variable>
      </ProcedureCall>
    </TestCase>
    <TestCase id="_2D7h"
              name="Checking if ENC board is enabled  If not enable it">
      <ProcedureCall id="_2D7i"
                     procedure="GUI.SetupTab.DeviceTab.Get_ENCBoard_Mode"
                     retvarname="status_value"/>
      <IfSequence id="_2D7j"
                  test="&#34;$(status_value)&#34; == &#34;Disabled&#34;">
        <ProcedureCall id="_2D7k" procedure="Miscellaneous.Test_Comment">
          <variable name="message">ENC board is disabled. Need to enable it</variable>
        </ProcedureCall>
        <ProcedureCall id="_2D7l"
                       procedure="GUI.SetupTab.DeviceTab.Edit_ENCBoard_Status"
                       retvarname="return_value">
          <variable name="Status">HVQM</variable>
        </ProcedureCall>
        <IfSequence id="_2D7m"
                    test="&#34;$(return_value)&#34; == &#34;Fail&#34;">
          <ProcedureCall id="_2Rfy" procedure="Miscellaneous.Test_Comment">
            <variable name="message">ENC board is disabled</variable>
          </ProcedureCall>
          <ProcedureCall id="_2DFt"
                         procedure="Miscellaneous.QFT.Abort_Script"/>
        </IfSequence>
        <ElseSequence id="_2DFu">
          <ProcedureCall id="_2DFv" procedure="Miscellaneous.Test_Comment">
            <variable name="message">It is enabled</variable>
          </ProcedureCall>
        </ElseSequence>
      </IfSequence>
    </TestCase>
  </TestSet>
  <TestSet id="_25MF" name="Configuration">
    <TestCase disabled="true" id="_25JJ"
              name="Play the stream with 480i59_94_ts resolution">
      <ProcedureCall id="_25JK"
                     procedure="Tools.DektecStreamer.Start_SI_Streamer"
                     retvarname="ip_udp5">
        <variable name="stream_name">$(Stream)</variable>
        <variable name="username">5672</variable>
        <variable name="password">5672</variable>
        <variable name="client">Streamer</variable>
      </ProcedureCall>
      <ServerScriptStep id="_25JL">
        <code>ip_udp = rc.lookup("ip_udp5")
data = ip_udp.split(":")
ip = data[0]
udp = data[1]
rc.setGlobal("ip_address5",ip)
rc.setGlobal("udp5",udp)</code>
      </ServerScriptStep>
    </TestCase>
    <TestCase disabled="true" id="_25JM" name="Create an input Mux">
      <Test id="_25JN" name="Create an input mux">
        <ProcedureCall id="_25JO" procedure="GUI.MuxTab.Create_Gige_Input_Mux"
                       retvarname="input_muxid">
          <variable name="Input_Line">$(input_port)</variable>
          <variable name="Mux_Name"/>
          <variable name="IP_Address">$(ip_address5)</variable>
          <variable name="UDP_Port">$(udp5)</variable>
          <variable name="Source_IP_Filter"/>
          <variable name="Number_Of_Mux"/>
          <variable name="Port_Increment"/>
          <variable name="Last_Octet_Increment">True</variable>
          <variable name="Mux_Type">AUTO</variable>
          <variable name="Board">$(Ethernet_Board)</variable>
        </ProcedureCall>
      </Test>
      <Test id="_2MlE" name="Check if Input Mux is created " predelay="10000">
        <ProcedureCall id="_2MlF" procedure="GUI.Get_ME_Details"
                       retvarname="no_of_mux">
          <variable name="Label">Active_Input_Mux</variable>
        </ProcedureCall>
        <IfSequence id="_2MlG" test="&#34;$(no_of_mux)&#34;==&#34;1&#34;">
          <ProcedureCall id="_2MlH" procedure="Miscellaneous.Test_Comment">
            <variable name="message">input Mux is created</variable>
          </ProcedureCall>
          <ElseSequence id="_2MlI">
            <ProcedureCall id="_2MlJ"
                           procedure="Miscellaneous.QFT.Abort_Script"/>
          </ElseSequence>
        </IfSequence>
      </Test>
    </TestCase>
    <TestCase id="_25KN" name="Create an output Mux">
      <Test id="_25KO" name="Create an Output Mux">
        <ProcedureCall id="_29y1"
                       procedure="GUI.Output Groups.CBR.Select_CBR"/>
        <ProcedureCall id="_2BBE"
                       procedure="Miscellaneous.Random_Multicast_IP"
                       retvarname="ip_multicast"/>
        <ProcedureCall id="_2BBF"
                       procedure="Miscellaneous.Random_Multicast_IP"
                       retvarname="ip_multicast2"/>
        <ProcedureCall id="_2BBG"
                       procedure="Miscellaneous.Random_Multicast_IP"
                       retvarname="ip_multicast3"/>
        <ProcedureCall id="_29xP" procedure="Miscellaneous.Random_UDP"
                       retvarname="udp"/>
        <ProcedureCall id="_29xR" procedure="Miscellaneous.Random_UDP"
                       retvarname="udp2"/>
        <ProcedureCall id="_29xT" procedure="Miscellaneous.Random_UDP"
                       retvarname="udp3"/>
        <ProcedureCall id="_29xU" procedure="GUI.Output Groups.CBR.Add_Group"
                       retvarname="Mux_Id">
          <variable name="Config_File">CBR_ATSC_Group_1_ConfigFile.xml</variable>
          <variable name="Group_Number">0</variable>
          <variable name="Output_Port">$(output_port)</variable>
          <variable name="Main_IP_Address">$(ip_multicast)</variable>
          <variable name="Main_UDP_Port">$(udp)</variable>
          <variable name="Mode"/>
          <variable name="Total_Rate">30</variable>
          <variable name="Reserved_Rate">0.1</variable>
          <variable name="Data_Overhead"/>
          <variable name="Null_Padding"/>
          <variable name="Tagging"/>
          <variable name="DSCP"/>
          <variable name="RTP"/>
          <variable name="TTL"/>
          <variable name="MPEG_OUT"/>
          <variable name="Packet"/>
          <variable name="SDT"/>
          <variable name="Alternate_Mux">true</variable>
          <variable name="Alternate_Output_Port">$(output_port)</variable>
          <variable name="Alternate_IPAddress">$(ip_multicast2)</variable>
          <variable name="Alternate_UDP_Port">$(udp2)</variable>
          <variable name="Alternate_Mode"/>
          <variable name="Alternate_Total_Rate">30</variable>
          <variable name="Alternate_Reserved_Rate">0.1</variable>
          <variable name="Alternate_Data_Overhead"/>
          <variable name="Alternate_Null_Padding"/>
          <variable name="Alternate_Tagging"/>
          <variable name="Alternate_DSCP"/>
          <variable name="Alternate_RTP"/>
          <variable name="Alternate_TTL"/>
          <variable name="Alternate_MPEG_OUT"/>
          <variable name="Alternate_Packet"/>
          <variable name="Alternate_SDT"/>
          <variable name="Proxy_Mux">true</variable>
          <variable name="Proxy_Output_Port">$(output_port)</variable>
          <variable name="Proxy_IPAddress">$(ip_multicast3)</variable>
          <variable name="Proxy_UDP_Port">$(udp3)</variable>
          <variable name="Proxy_Mode"/>
          <variable name="Proxy_Total_Rate">0.5</variable>
          <variable name="Proxy_Reserved_Rate">0.1</variable>
          <variable name="Proxy_Data_Overhead"/>
          <variable name="Proxy_Null_Padding"/>
          <variable name="Proxy_Tagging"/>
          <variable name="Proxy_DSCP"/>
          <variable name="Proxy_RTP"/>
          <variable name="Proxy_TTL"/>
          <variable name="Proxy_MPEG_OUT"/>
          <variable name="Proxy_Packet"/>
          <variable name="Proxy_SDT"/>
        </ProcedureCall>
        <ServerScriptStep id="_29xV">
          <code>Muxid=rc.lookup("Mux_Id")
mux_ids=Muxid.split(" ")
main_mux_id=mux_ids[0]
alter_mux_id=mux_ids[1]
group_id=mux_ids[3]
rc.setGlobal("outputmuxid",main_mux_id)
rc.setGlobal("altermuxid",alter_mux_id)
rc.setGlobal("group_id",group_id)


</code>
        </ServerScriptStep>
        <ClientScriptStep client="$(client)" id="_2B2z">
          <code>val = rc.lookup("outputmuxid")
current_value = val.split("_")
rc.setGlobal("outmuxID", current_value[1])</code>
        </ClientScriptStep>
      </Test>
      <Test id="_2Mln" name="Check if Output Mux is created "
            predelay="10000">
        <ProcedureCall id="_2Mlo" procedure="GUI.Get_ME_Details"
                       retvarname="no_of_mux">
          <variable name="Label">Output_Mux</variable>
        </ProcedureCall>
        <IfSequence id="_2Mlp"
                    test="&#34;$(no_of_mux)&#34;==&#34;3&#34; and &#34;$(Mux_Id)&#34; !=&#34;-1&#34;">
          <ProcedureCall id="_2Mlq" procedure="Miscellaneous.Test_Comment">
            <variable name="message">CBR Mux is created</variable>
          </ProcedureCall>
          <ElseSequence id="_2Mlr">
            <ProcedureCall id="_2Mls"
                           procedure="Miscellaneous.QFT.Abort_Script"/>
          </ElseSequence>
        </IfSequence>
      </Test>
    </TestCase>
    <TestCase disabled="true" id="_2TAI" name="Groom">
      <Test id="_2Mlt" name="Get Video and Audio Input PID ">
        <ProcedureCall id="_2Mlu" procedure="XML.Connect_xml"
                       retvarname="Session">
          <variable name="DUT_IP">$(dutIP)</variable>
        </ProcedureCall>
        <ProcedureCall id="_2Mlv" procedure="XML.Get_Configuration_xml"
                       retvarname="config">
          <variable name="DUT_IP">$(dutIP)</variable>
          <variable name="Session_ID">$(Session)</variable>
        </ProcedureCall>
        <ProcedureCall id="_2Mlw" procedure="Miscellaneous.XML_Parser"
                       retvarname="Video_IN_PID">
          <variable name="XML_file">$(config)</variable>
          <variable name="Path">farmer/board/gige-line/inputs/gige-input-mux/input-program/stream</variable>
          <variable name="Index">0</variable>
          <variable name="Attribute">id</variable>
        </ProcedureCall>
        <ProcedureCall id="_2Mlx" procedure="Miscellaneous.XML_Parser"
                       retvarname="Audio_IN_PID">
          <variable name="XML_file">$(config)</variable>
          <variable name="Path">farmer/board/gige-line/inputs/gige-input-mux/input-program/stream</variable>
          <variable name="Index">1</variable>
          <variable name="Attribute">id</variable>
        </ProcedureCall>
        <ProcedureCall id="_2Mly" procedure="XML.Disconnect_xml">
          <variable name="DUT_IP">$(dutIP)</variable>
          <variable name="Session_ID">$(Session)</variable>
        </ProcedureCall>
      </Test>
      <Test id="_2TAJ" name="Groom">
        <TryStep id="_2ReY">
          <ProcedureCall id="_25JQ" procedure="GUI.ProcessingTab.CustomGroom">
            <variable name="Primary_or_Backup">Primary</variable>
            <variable name="Input_Port">$(input_port)</variable>
            <variable name="Input_MuxID">$(input_muxid)</variable>
            <variable name="output_muxid">$(outputmuxid)</variable>
            <variable name="Elementary_Stream_PID_1">$(Video_IN_PID)</variable>
            <variable name="Elementary_Stream_PID_2">$(Audio_IN_PID)</variable>
            <variable name="Elementary_Stream_PID_3"/>
            <variable name="Elementary_Stream_PID_4"/>
            <variable name="Elementary_Stream_PID_5"/>
            <variable name="Board">$(Ethernet_Board)</variable>
          </ProcedureCall>
          <ProcedureCall id="_2DDU"
                         procedure="GUI.ProcessingTab.Click_Apply"/>
          <CatchSequence exception="TestException" id="_2ReZ" maxerror="0">
            <ProcedureCall id="_2TAU"
                           procedure="GUI.ProcessingTab.CustomGroom">
              <variable name="Primary_or_Backup">Primary</variable>
              <variable name="Input_Port">$(input_port)</variable>
              <variable name="Input_MuxID">$(input_muxid)</variable>
              <variable name="output_muxid">$(outputmuxid)</variable>
              <variable name="Elementary_Stream_PID_1">$(Video_IN_PID)</variable>
              <variable name="Elementary_Stream_PID_2">$(Audio_IN_PID)</variable>
              <variable name="Elementary_Stream_PID_3"/>
              <variable name="Elementary_Stream_PID_4"/>
              <variable name="Elementary_Stream_PID_5"/>
              <variable name="Board">$(Ethernet_Board)</variable>
            </ProcedureCall>
            <ProcedureCall id="_2Rej"
                           procedure="GUI.ProcessingTab.Click_Apply"/>
          </CatchSequence>
        </TryStep>
      </Test>
      <Test id="_2Rec" name="Check if grooming is successful"
            predelay="10000">
        <ProcedureCall id="_2Red" procedure="GUI.Get_ME_Details"
                       retvarname="groomed_program">
          <variable name="Label">Groomed_Programs</variable>
        </ProcedureCall>
        <IfSequence id="_2Ree"
                    test="&#34;$(groomed_program)&#34;==&#34;3&#34;">
          <ProcedureCall id="_2Ref" procedure="Miscellaneous.Test_Comment">
            <variable name="message">CBR Mux is successfully groomed</variable>
          </ProcedureCall>
          <ElseSequence id="_2Reg">
            <ProcedureCall id="_2T9h" procedure="Miscellaneous.Test_Comment">
              <variable name="message">Grooming unsuccessfull</variable>
            </ProcedureCall>
            <ProcedureCall id="_2Reh"
                           procedure="Miscellaneous.QFT.Abort_Script"/>
          </ElseSequence>
        </IfSequence>
      </Test>
      <TestStep id="_256C" name="Get Video,Audio and PMT PID for Program1">
        <ProcedureCall id="_2B73"
                       procedure="GUI.ProcessingTab.Grooming_Definitions.Get_Primary_Streams_Details"
                       retvarname="video_pid_1">
          <variable name="Column_name">Out PID</variable>
          <variable name="In_PID">$(Video_IN_PID)</variable>
        </ProcedureCall>
        <ProcedureCall id="_25EG" procedure="Miscellaneous.Test_Comment">
          <variable name="message">video pid is $(video_pid_1)</variable>
        </ProcedureCall>
        <ProcedureCall id="_2B74"
                       procedure="GUI.ProcessingTab.Grooming_Definitions.Get_Primary_Streams_Details"
                       retvarname="audio_pid_1">
          <variable name="Column_name">Out PID</variable>
          <variable name="In_PID">$(Audio_IN_PID)</variable>
        </ProcedureCall>
        <ProcedureCall id="_25EK" procedure="Miscellaneous.Test_Comment">
          <variable name="message">audio pid is $(audio_pid_1) </variable>
        </ProcedureCall>
        <ProcedureCall id="_2B77"
                       procedure="GUI.Output Groups.CBR.Get_Output_Programs_Details"
                       retvarname="pmt_pid_1">
          <variable name="Mux_ID">$(outmuxID)</variable>
          <variable name="Prog_Num">1</variable>
          <variable name="Column">PMT PID</variable>
        </ProcedureCall>
        <ProcedureCall id="_25EO" procedure="Miscellaneous.Test_Comment">
          <variable name="message">PMT PID is $(pmt_pid_1)</variable>
        </ProcedureCall>
      </TestStep>
    </TestCase>
  </TestSet>
  <TestSet disabled="true" id="_25NN" name="Validating the test case">
    <TestCase id="_25NO"
              name="3295 SD - VES Bitrate settings - 480i59 94 Input PHigh">
      <Test id="_2TII" name="UDP">
        <Test id="_2TMB" name="Change VES bitrates and verifying">
          <ServerScriptStep id="_2Ump"
                            name="Select random bitrate from the list">
            <code>import random
######Select random bitrate#####
TS_list = {10000,8000,4000,2000,1500,1000,900,700,800,799}
num_to_select = 4
TS_rate_list = random.sample(TS_list, num_to_select)
rc.setGlobal("VES_bitrate0",TS_rate_list[0])
rc.setGlobal("VES_bitrate1",TS_rate_list[1])
rc.setGlobal("VES_bitrate2",TS_rate_list[2])
rc.setGlobal("VES_bitrate3",TS_rate_list[3])</code>
            <comment>Valid range is 100-10000. so giving 10000 instead of 14000</comment>
          </ServerScriptStep>
          <RepeatSequence count="4" id="_2TIE" var="i">
            <variable name="min">0</variable>
            <variable name="max">9</variable>
            <TestStep id="_25NP"
                      name="Enable Video Elementary Stream (VES) bit rate and set it to $(VES_bitrate$(i))">
              <ProcedureCall id="_2D+Q"
                             procedure="GUI.ProcessingTab.Select_Output_Mux">
                <variable name="muxid">$(altermuxid)</variable>
              </ProcedureCall>
              <ProcedureCall id="_2D+R"
                             procedure="GUI.ProcessingTab.Select_Output_Mux">
                <variable name="muxid">$(outputmuxid)</variable>
              </ProcedureCall>
              <IfSequence id="_2TJ6" test="&#34;$(i)&#34; != &#34;0&#34;">
                <ProcedureCall id="_2TJ7"
                               procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
                  <variable name="In_PID">$(Video_IN_PID)</variable>
                  <variable name="MCTF_Strength"/>
                  <variable name="Resolution"/>
                  <variable name="ScalingType"/>
                  <variable name="GOPStructure"/>
                  <variable name="I_Frame_Period"/>
                  <variable name="VES_Bitrate">Disable</variable>
                  <variable name="RateControl"/>
                  <variable name="Bandwidth_Reclamation"/>
                  <variable name="Profile"/>
                  <variable name="Enable_DeBlockingFilter"/>
                </ProcedureCall>
              </IfSequence>
              <ProcedureCall id="_25NQ"
                             procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
                <variable name="In_PID">$(Video_IN_PID)</variable>
                <variable name="MCTF_Strength"/>
                <variable name="Resolution"/>
                <variable name="ScalingType"/>
                <variable name="GOPStructure"/>
                <variable name="I_Frame_Period"/>
                <variable name="VES_Bitrate">$(VES_bitrate$(i))</variable>
                <variable name="RateControl"/>
                <variable name="Bandwidth_Reclamation"/>
                <variable name="Profile"/>
                <variable name="Enable_DeBlockingFilter"/>
              </ProcedureCall>
            </TestStep>
            <TestStep id="_25NR" name="Verify on analyser">
              <TestStep id="_2TAV" name="Verify Groom in analyser">
                <TryStep id="_2MbF">
                  <ProcedureCall id="_2E5Y"
                                 procedure="Tools.AnalyzerTools.Get_Gige_Analyser_Log"
                                 retvarname="Analyser_Log$(i)">
                    <variable name="Multicast_IP">$(ip_multicast)</variable>
                    <variable name="Udp_Port">$(udp)</variable>
                    <variable name="Waittime_in_Sec">120</variable>
                    <variable name="Analyser_Host_IP">$(Host_IP)</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_2EC1"
                                 procedure="Tools.AnalyzerTools.Check_Analyser">
                    <variable name="Analyser_log">$(Analyser_Log$(i))</variable>
                    <variable name="Program_Number">1</variable>
                    <variable name="PMT_PID">$(pmt_pid_1)</variable>
                    <variable name="Audio_PID">$(audio_pid_1)</variable>
                    <variable name="Video_PID">$(video_pid_1)</variable>
                    <variable name="Cue_PID"/>
                  </ProcedureCall>
                  <CatchSequence exception="TestException" id="_2MbG"
                                 maxerror="0">
                    <ProcedureCall id="_2MbH"
                                   procedure="Tools.AnalyzerTools.Get_Gige_Analyser_Log"
                                   retvarname="Analyser_Log$(i)">
                      <variable name="Multicast_IP">$(ip_multicast)</variable>
                      <variable name="Udp_Port">$(udp)</variable>
                      <variable name="Waittime_in_Sec">120</variable>
                      <variable name="Analyser_Host_IP">$(Host_IP)</variable>
                    </ProcedureCall>
                    <ProcedureCall id="_2MbI"
                                   procedure="Tools.AnalyzerTools.Check_Analyser">
                      <variable name="Analyser_log">$(Analyser_Log$(i))</variable>
                      <variable name="Program_Number">1</variable>
                      <variable name="PMT_PID">$(pmt_pid_1)</variable>
                      <variable name="Audio_PID">$(audio_pid_1)</variable>
                      <variable name="Video_PID">$(video_pid_1)</variable>
                      <variable name="Cue_PID"/>
                    </ProcedureCall>
                  </CatchSequence>
                </TryStep>
              </TestStep>
              <TestStep id="_2TAW" name="Verify VES bitrate in analyser">
                <SetGlobalStep id="_2Dzp" varname="ConfiguredBitRate">
                  <default>$[$(VES_bitrate$(i))*.001]</default>
                </SetGlobalStep>
                <ProcedureCall id="_2TKc"
                               procedure="Tools.AnalyzerTools.Output_Bitrate_Exist"
                               retvarname="video_bit_rate_fallbck_1$(i)">
                  <variable name="Multicast_IP">$(ip_multicast)</variable>
                  <variable name="Udp_Port">$(udp)</variable>
                  <variable name="Audio_PID"/>
                  <variable name="Video_PID">$(video_pid_1)</variable>
                </ProcedureCall>
                <ProcedureCall id="_2Cfk"
                               procedure="Miscellaneous.Bitrate_Check">
                  <variable name="Configured_Bitrate">$(ConfiguredBitRate)</variable>
                  <variable name="Percentage_Variance">10</variable>
                  <variable name="Actual_Bitrate">$(video_bit_rate_fallbck_1$(i))</variable>
                </ProcedureCall>
              </TestStep>
            </TestStep>
          </RepeatSequence>
        </Test>
        <TestStep id="_2BAA" name="Thumbnail_Verification">
          <ProcedureCall id="_2BAB" predelay="2000"
                         procedure="GUI.Thumbnail.CBR.Thumbnail_Check"
                         retvarname="Thumbnail_Check">
            <variable name="Group_Name">$(group_id)</variable>
            <variable name="Mux_Type">MAIN</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TIF" procedure="Miscellaneous.Test_Comment">
            <variable name="message">Thumbnail Check results $(Thumbnail_Check)</variable>
          </ProcedureCall>
          <IfSequence id="_2BAC" test="$(Thumbnail_Check) == 1">
            <ProcedureCall id="_2BAD" procedure="Miscellaneous.Test_Comment">
              <variable name="message">Thumbnail Verified</variable>
            </ProcedureCall>
            <ElseSequence id="_2TIG">
              <ProcedureCall id="_2TL5" predelay="2000"
                             procedure="GUI.Thumbnail.CBR.Thumbnail_Check"
                             retvarname="Thumbnail_Check">
                <variable name="Group_Name">$(group_id)</variable>
                <variable name="Mux_Type">MAIN</variable>
              </ProcedureCall>
              <IfSequence id="_2TL7" test="$(Thumbnail_Check) == 1">
                <ProcedureCall id="_2TL8"
                               procedure="Miscellaneous.Test_Comment">
                  <variable name="message">Thumbnail Verified</variable>
                </ProcedureCall>
                <ElseSequence id="_2TL9">
                  <ProcedureCall id="_2TLB" predelay="2000"
                                 procedure="GUI.Thumbnail.CBR.Thumbnail_Check"
                                 retvarname="Thumbnail_Check">
                    <variable name="Group_Name">$(group_id)</variable>
                    <variable name="Mux_Type">MAIN</variable>
                  </ProcedureCall>
                  <IfSequence id="_2TLC" test="$(Thumbnail_Check) == 1">
                    <ProcedureCall id="_2TLD"
                                   procedure="Miscellaneous.Test_Comment">
                      <variable name="message">Thumbnail Verified</variable>
                    </ProcedureCall>
                    <ElseSequence id="_2TLE">
                      <ProcedureCall id="_2TLF"
                                     procedure="Miscellaneous.QFT.Fail_TC">
                        <variable name="fail_message">Thumbnail verification failed</variable>
                      </ProcedureCall>
                    </ElseSequence>
                  </IfSequence>
                </ElseSequence>
              </IfSequence>
            </ElseSequence>
          </IfSequence>
        </TestStep>
        <TestStep id="_2B8y" name="Stop the stream">
          <ProcedureCall id="_2BAY"
                         procedure="Tools.DektecStreamer.Action_SI_Streamer">
            <variable name="IP_UDP">$(ip_udp5)</variable>
            <variable name="Action">Release</variable>
            <variable name="username">5672</variable>
            <variable name="password">5672</variable>
            <variable name="client">Streamer</variable>
          </ProcedureCall>
        </TestStep>
        <TestStep id="_2B8x" name="Delete Output group">
          <ProcedureCall id="_2B8u"
                         procedure="GUI.ProcessingTab.Delete_Grooming_Definition">
            <variable name="Output_Line">$(output_port)</variable>
            <variable name="Output_Mux_ID">$(outputmuxid)</variable>
            <variable name="Delete_Primary_Grooming">Yes</variable>
            <variable name="Delete_Backup1_Grooming"/>
            <variable name="Delete_Backup2_Grooming"/>
          </ProcedureCall>
          <ProcedureCall id="_2B8v" procedure="GUI.Sleep">
            <variable name="Time(Sec)">60</variable>
          </ProcedureCall>
          <ProcedureCall id="_29wm"
                         procedure="GUI.Output Groups.CBR.Delete_Group">
            <variable name="Main_MuxID">$(outmuxID)</variable>
          </ProcedureCall>
        </TestStep>
        <TestStep id="_2B8w" name="Delete the Input Mux">
          <ProcedureCall id="_2BAZ"
                         procedure="GUI.MuxTab.Delete_Gige_Input_Mux">
            <variable name="Gig_Port">$(input_port)</variable>
            <variable name="Mux_ID">$(input_muxid)</variable>
            <variable name="Board">Board 4</variable>
          </ProcedureCall>
        </TestStep>
      </Test>
      <Test id="_25OO" name="SDI">
        <TestStep id="_25OX" name="SDI Configuration">
          <TestStep id="_2TIn" name="Selecting 480i59 94 from Video Hub">
            <ProcedureCall id="_2TIo"
                           procedure="Tools.KleverTools.Auto_Videohub_Switch2">
              <variable name="VideoHubIp">10.77.240.100</variable>
              <variable name="inPort">$(inPort)</variable>
              <variable name="outPort">$(outPort)</variable>
            </ProcedureCall>
          </TestStep>
          <TestStep id="_25OZ" name="Enabling SDI on ME">
            <ProcedureCall id="_25Oa"
                           procedure="GUI.MuxTab.Enable_SDI_Configuration">
              <variable name="Enable_Config_Line">Enable</variable>
              <variable name="Input_Line">$(SDI_input_port)</variable>
              <variable name="Board">$(SDI_Board)</variable>
              <variable name="Video_Format">$(Resolution)</variable>
              <variable name="InputClosedCaption"/>
              <variable name="SCTE104_Extraction"/>
            </ProcedureCall>
            <TryStep id="_25Wh">
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonApply13" event="MOUSE_MPRC"
                              id="_25WB" modifiers="16"/>
              <CatchSequence exception="TestException" id="_25Wi"
                             maxerror="0"/>
            </TryStep>
          </TestStep>
          <TestStep id="_25Wl" name="Enabling Audio">
            <ProcedureCall id="_25Wm"
                           procedure="GUI.MuxTab.Edit_SDIAudio_Configuration">
              <variable name="Audio_Channel">$(Audio_Channel)</variable>
              <variable name="value">Dolby Digital</variable>
              <variable name="Input_Line">$(SDI_input_port)</variable>
              <variable name="Board">$(SDI_Board)</variable>
            </ProcedureCall>
            <TryStep id="_25XB">
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonApply13" event="MOUSE_MPRC"
                              id="_25XC" modifiers="16"/>
              <CatchSequence exception="TestException" id="_25XD"
                             maxerror="0"/>
            </TryStep>
          </TestStep>
          <TestStep id="_2TIK" name="Check Input mux">
            <ProcedureCall id="_2TIJ"
                           procedure="GUI.MuxTab.Check_SDI_Input_Mux"
                           retvarname="sdi_input">
              <variable name="SDI_Board">$(SDI_Board)</variable>
              <variable name="Input_Line">$(SDI_input_port)</variable>
            </ProcedureCall>
            <IfSequence id="_2TIP" test="&#34;$(sdi_input)&#34;==&#34;1&#34;">
              <ProcedureCall id="_2TIQ"
                             procedure="Miscellaneous.Test_Comment">
                <variable name="message">SDI enabled</variable>
              </ProcedureCall>
              <ElseSequence id="_2TIR">
                <ProcedureCall id="_2TIS"
                               procedure="Miscellaneous.QFT.Abort_Script"/>
              </ElseSequence>
            </IfSequence>
          </TestStep>
          <TestStep id="_2BAb" name="Create an Output Mux">
            <ProcedureCall id="_2BAc"
                           procedure="GUI.Output Groups.CBR.Select_CBR"/>
            <ProcedureCall id="_2BBH"
                           procedure="Miscellaneous.Random_Multicast_IP"
                           retvarname="ip_multicast"/>
            <ProcedureCall id="_2BBI"
                           procedure="Miscellaneous.Random_Multicast_IP"
                           retvarname="ip_multicast2"/>
            <ProcedureCall id="_2BBJ"
                           procedure="Miscellaneous.Random_Multicast_IP"
                           retvarname="ip_multicast3"/>
            <ProcedureCall id="_2BAe" procedure="Miscellaneous.Random_UDP"
                           retvarname="udp"/>
            <ProcedureCall id="_2BAg" procedure="Miscellaneous.Random_UDP"
                           retvarname="udp2"/>
            <ProcedureCall id="_2BAi" procedure="Miscellaneous.Random_UDP"
                           retvarname="udp3"/>
            <ProcedureCall id="_2BAj"
                           procedure="GUI.Output Groups.CBR.Add_Group"
                           retvarname="Mux_Id">
              <variable name="Config_File">CBR_ATSC_Group_1_ConfigFile.xml</variable>
              <variable name="Group_Number">0</variable>
              <variable name="Output_Port">$(output_port)</variable>
              <variable name="Main_IP_Address">$(ip_multicast)</variable>
              <variable name="Main_UDP_Port">$(udp)</variable>
              <variable name="Mode"/>
              <variable name="Total_Rate">30</variable>
              <variable name="Reserved_Rate">0.1</variable>
              <variable name="Data_Overhead"/>
              <variable name="Null_Padding"/>
              <variable name="Tagging"/>
              <variable name="DSCP"/>
              <variable name="RTP"/>
              <variable name="TTL"/>
              <variable name="MPEG_OUT"/>
              <variable name="Packet"/>
              <variable name="SDT"/>
              <variable name="Alternate_Mux">true</variable>
              <variable name="Alternate_Output_Port">$(output_port)</variable>
              <variable name="Alternate_IPAddress">$(ip_multicast2)</variable>
              <variable name="Alternate_UDP_Port">$(udp2)</variable>
              <variable name="Alternate_Mode"/>
              <variable name="Alternate_Total_Rate">30</variable>
              <variable name="Alternate_Reserved_Rate">0.1</variable>
              <variable name="Alternate_Data_Overhead"/>
              <variable name="Alternate_Null_Padding"/>
              <variable name="Alternate_Tagging"/>
              <variable name="Alternate_DSCP"/>
              <variable name="Alternate_RTP"/>
              <variable name="Alternate_TTL"/>
              <variable name="Alternate_MPEG_OUT"/>
              <variable name="Alternate_Packet"/>
              <variable name="Alternate_SDT"/>
              <variable name="Proxy_Mux">true</variable>
              <variable name="Proxy_Output_Port">$(output_port)</variable>
              <variable name="Proxy_IPAddress">$(ip_multicast3)</variable>
              <variable name="Proxy_UDP_Port">$(udp3)</variable>
              <variable name="Proxy_Mode"/>
              <variable name="Proxy_Total_Rate">0.5</variable>
              <variable name="Proxy_Reserved_Rate">0.1</variable>
              <variable name="Proxy_Data_Overhead"/>
              <variable name="Proxy_Null_Padding"/>
              <variable name="Proxy_Tagging"/>
              <variable name="Proxy_DSCP"/>
              <variable name="Proxy_RTP"/>
              <variable name="Proxy_TTL"/>
              <variable name="Proxy_MPEG_OUT"/>
              <variable name="Proxy_Packet"/>
              <variable name="Proxy_SDT"/>
            </ProcedureCall>
            <ServerScriptStep id="_2BAk">
              <code>Muxid=rc.lookup("Mux_Id")
mux_ids=Muxid.split(" ")
main_mux_id=mux_ids[0]
alter_mux_id=mux_ids[1]
group_id=mux_ids[3]
rc.setGlobal("outputmuxid",main_mux_id)
rc.setGlobal("altermuxid",alter_mux_id)
rc.setGlobal("group_id",group_id)


</code>
            </ServerScriptStep>
            <ClientScriptStep client="$(client)" id="_2BAl">
              <code>val = rc.lookup("outputmuxid")
current_value = val.split("_")
rc.setGlobal("outmuxID", current_value[1])</code>
            </ClientScriptStep>
          </TestStep>
          <TestStep id="_2TIT" name="Check if Output Mux is created "
                    predelay="10000">
            <ProcedureCall id="_2TIU" procedure="GUI.Get_ME_Details"
                           retvarname="no_of_mux">
              <variable name="Label">Output_Mux</variable>
            </ProcedureCall>
            <IfSequence id="_2TIV"
                        test="&#34;$(no_of_mux)&#34;==&#34;3&#34; and &#34;$(Mux_Id)&#34; !=&#34;-1&#34;">
              <ProcedureCall id="_2TIW"
                             procedure="Miscellaneous.Test_Comment">
                <variable name="message">CBR Mux is created</variable>
              </ProcedureCall>
              <ElseSequence id="_2TIX">
                <ProcedureCall id="_2TIY"
                               procedure="Miscellaneous.QFT.Abort_Script"/>
              </ElseSequence>
            </IfSequence>
          </TestStep>
          <TestStep id="_25Pa" name="Groom and validation">
            <TryStep id="_2TIg">
              <ProcedureCall id="_25Rw"
                             procedure="GUI.ProcessingTab.SDI_ProgramGroom">
                <variable name="Output_Line">$(output_port)</variable>
                <variable name="Output_Muxid">$(outputmuxid)</variable>
                <variable name="Input_Port_Primary">$(SDI_input_port)</variable>
                <variable name="Input_Program">SDI Input Program</variable>
                <variable name="Input_Port_Backup"/>
                <variable name="Input_Backup_Program"/>
                <variable name="Input_Slate">Standard Video Files</variable>
                <variable name="Input_Slate_FileName"/>
                <variable name="Board">$(SDI_Board)</variable>
              </ProcedureCall>
              <ProcedureCall id="_2TIi"
                             procedure="GUI.ProcessingTab.Click_Apply"/>
              <CatchSequence exception="TestException" id="_2TIj"
                             maxerror="0">
                <ProcedureCall id="_2TIm"
                               procedure="GUI.ProcessingTab.SDI_ProgramGroom">
                  <variable name="Output_Line">$(output_port)</variable>
                  <variable name="Output_Muxid">$(outputmuxid)</variable>
                  <variable name="Input_Port_Primary">$(SDI_input_port)</variable>
                  <variable name="Input_Program">SDI Input Program</variable>
                  <variable name="Input_Port_Backup"/>
                  <variable name="Input_Backup_Program"/>
                  <variable name="Input_Slate">Standard Video Files</variable>
                  <variable name="Input_Slate_FileName"/>
                  <variable name="Board">$(SDI_Board)</variable>
                </ProcedureCall>
                <ProcedureCall id="_2TIl"
                               procedure="GUI.ProcessingTab.Click_Apply"/>
              </CatchSequence>
            </TryStep>
            <Test id="_2TIZ" name="Check if grooming is successful"
                  predelay="10000">
              <ProcedureCall id="_2TIa" procedure="GUI.Get_ME_Details"
                             retvarname="groomed_program">
                <variable name="Label">Groomed_Programs</variable>
              </ProcedureCall>
              <IfSequence id="_2TIb"
                          test="&#34;$(groomed_program)&#34;==&#34;3&#34;">
                <ProcedureCall id="_2TIc"
                               procedure="Miscellaneous.Test_Comment">
                  <variable name="message">CBR Mux is successfully groomed</variable>
                </ProcedureCall>
                <ElseSequence id="_2TId">
                  <ProcedureCall id="_2TIe"
                                 procedure="Miscellaneous.Test_Comment">
                    <variable name="message">Grooming unsuccessfull</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_2TIf"
                                 procedure="Miscellaneous.QFT.Abort_Script"/>
                </ElseSequence>
              </IfSequence>
            </Test>
          </TestStep>
        </TestStep>
        <TestStep id="_2TKj" name="Get Video and Audio Input PID ">
          <ProcedureCall id="_2TKk" procedure="XML.Connect_xml"
                         retvarname="Session">
            <variable name="DUT_IP">$(dutIP)</variable>
          </ProcedureCall>
          <IfSequence id="_2TKq" test="&#34;$(Session)&#34; != &#34;-1&#34;">
            <ProcedureCall id="_2TKr" procedure="Miscellaneous.Test_Comment">
              <variable name="message">session enabled</variable>
            </ProcedureCall>
            <ElseSequence id="_2TKs">
              <ProcedureCall id="_2TKt" procedure="Miscellaneous.QFT.Fail_TC">
                <variable name="fail_message">Session not enabled</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
          <ProcedureCall id="_2TKl" procedure="XML.Get_Configuration_xml"
                         retvarname="config">
            <variable name="DUT_IP">$(dutIP)</variable>
            <variable name="Session_ID">$(Session)</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TKm" procedure="Miscellaneous.XML_Parser"
                         retvarname="SDI_Video_IN_PID">
            <variable name="XML_file">$(config)</variable>
            <variable name="Path">farmer/board/bnc-line/sdi-input-mux/input-program/stream</variable>
            <variable name="Index">0</variable>
            <variable name="Attribute">id</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TKn" procedure="Miscellaneous.XML_Parser"
                         retvarname="SDI_Audio_IN_PID">
            <variable name="XML_file">$(config)</variable>
            <variable name="Path">farmer/board/bnc-line/sdi-input-mux/input-program/stream</variable>
            <variable name="Index">1</variable>
            <variable name="Attribute">id</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TKo" procedure="XML.Disconnect_xml">
            <variable name="DUT_IP">$(dutIP)</variable>
            <variable name="Session_ID">$(Session)</variable>
          </ProcedureCall>
        </TestStep>
        <TestStep id="_2TKu" name="Get Video,Audio and PMT PID for Program1">
          <ProcedureCall id="_2TKv"
                         procedure="GUI.ProcessingTab.Grooming_Definitions.Get_Primary_Streams_Details"
                         retvarname="sdi_video_pid_1">
            <variable name="Column_name">Out PID</variable>
            <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TKw" procedure="Miscellaneous.Test_Comment">
            <variable name="message">video pid is $(sdi_video_pid_1)</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TKx"
                         procedure="GUI.ProcessingTab.Grooming_Definitions.Get_Primary_Streams_Details"
                         retvarname="sdi_audio_pid_1">
            <variable name="Column_name">Out PID</variable>
            <variable name="In_PID">$(SDI_Audio_IN_PID)</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TKy" procedure="Miscellaneous.Test_Comment">
            <variable name="message">audio pid is $(sdi_audio_pid_1) </variable>
          </ProcedureCall>
          <ProcedureCall id="_2TKz"
                         procedure="GUI.Output Groups.CBR.Get_Output_Programs_Details"
                         retvarname="pmt_pid_1">
            <variable name="Mux_ID">$(outmuxID)</variable>
            <variable name="Prog_Num">1</variable>
            <variable name="Column">PMT PID</variable>
          </ProcedureCall>
          <ProcedureCall id="_2TK+" procedure="Miscellaneous.Test_Comment">
            <variable name="message">PMT PID is $(pmt_pid_1)</variable>
          </ProcedureCall>
        </TestStep>
        <Test id="_2Un1" name="Change VES bitrates and verifying">
          <ServerScriptStep id="_2Un2"
                            name="Select random bitrate from the list">
            <code>import random
######Select random bitrate#####
TS_list = {10000,8000,4000,2000,1500,1000,900,700,800,799}
num_to_select = 4
TS_rate_list = random.sample(TS_list, num_to_select)
rc.setGlobal("VES_bitrate0",TS_rate_list[0])
rc.setGlobal("VES_bitrate1",TS_rate_list[1])
rc.setGlobal("VES_bitrate2",TS_rate_list[2])
rc.setGlobal("VES_bitrate3",TS_rate_list[3])</code>
            <comment>Valid range is 100-10000. so giving 10000 instead of 14000</comment>
          </ServerScriptStep>
          <RepeatSequence count="4" id="_2Un3" var="i">
            <variable name="min">0</variable>
            <variable name="max">9</variable>
            <TestStep id="_2TIq"
                      name="Enable Video Elementary Stream (VES) bit rate and set it to $(VES_bitrate$(i))">
              <ProcedureCall id="_2TIr"
                             procedure="GUI.ProcessingTab.Select_Output_Mux">
                <variable name="muxid">$(altermuxid)</variable>
              </ProcedureCall>
              <ProcedureCall id="_2TIs"
                             procedure="GUI.ProcessingTab.Select_Output_Mux">
                <variable name="muxid">$(outputmuxid)</variable>
              </ProcedureCall>
              <IfSequence id="_2TJ8" test="&#34;$(i)&#34; != &#34;0&#34;">
                <ProcedureCall id="_2TJ9"
                               procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
                  <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
                  <variable name="MCTF_Strength"/>
                  <variable name="Resolution"/>
                  <variable name="ScalingType"/>
                  <variable name="GOPStructure"/>
                  <variable name="I_Frame_Period"/>
                  <variable name="VES_Bitrate">Disable</variable>
                  <variable name="RateControl"/>
                  <variable name="Bandwidth_Reclamation"/>
                  <variable name="Profile"/>
                  <variable name="Enable_DeBlockingFilter"/>
                </ProcedureCall>
              </IfSequence>
              <ProcedureCall id="_2TIt"
                             procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
                <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
                <variable name="MCTF_Strength"/>
                <variable name="Resolution"/>
                <variable name="ScalingType"/>
                <variable name="GOPStructure"/>
                <variable name="I_Frame_Period"/>
                <variable name="VES_Bitrate">$(VES_bitrate$(i))</variable>
                <variable name="RateControl"/>
                <variable name="Bandwidth_Reclamation"/>
                <variable name="Profile"/>
                <variable name="Enable_DeBlockingFilter"/>
              </ProcedureCall>
            </TestStep>
            <TestStep id="_2TIu" name="Verify on analyser">
              <TestStep id="_2TIv" name="Verify Groom in analyser">
                <TryStep id="_2TIw">
                  <ProcedureCall id="_2TIx"
                                 procedure="Tools.AnalyzerTools.Get_Gige_Analyser_Log"
                                 retvarname="Analyser_Log$(i)">
                    <variable name="Multicast_IP">$(ip_multicast)</variable>
                    <variable name="Udp_Port">$(udp)</variable>
                    <variable name="Waittime_in_Sec">120</variable>
                    <variable name="Analyser_Host_IP">$(Host_IP)</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_2TIy"
                                 procedure="Tools.AnalyzerTools.Check_Analyser">
                    <variable name="Analyser_log">$(Analyser_Log$(i))</variable>
                    <variable name="Program_Number">1</variable>
                    <variable name="PMT_PID">$(pmt_pid_1)</variable>
                    <variable name="Audio_PID">$(audio_pid_1)</variable>
                    <variable name="Video_PID">$(video_pid_1)</variable>
                    <variable name="Cue_PID"/>
                  </ProcedureCall>
                  <CatchSequence exception="TestException" id="_2TIz"
                                 maxerror="0">
                    <ProcedureCall id="_2TI+"
                                   procedure="Tools.AnalyzerTools.Get_Gige_Analyser_Log"
                                   retvarname="Analyser_Log$(i)">
                      <variable name="Multicast_IP">$(ip_multicast)</variable>
                      <variable name="Udp_Port">$(udp)</variable>
                      <variable name="Waittime_in_Sec">120</variable>
                      <variable name="Analyser_Host_IP">$(Host_IP)</variable>
                    </ProcedureCall>
                    <ProcedureCall id="_2TI-"
                                   procedure="Tools.AnalyzerTools.Check_Analyser">
                      <variable name="Analyser_log">$(Analyser_Log$(i))</variable>
                      <variable name="Program_Number">1</variable>
                      <variable name="PMT_PID">$(pmt_pid_1)</variable>
                      <variable name="Audio_PID">$(audio_pid_1)</variable>
                      <variable name="Video_PID">$(video_pid_1)</variable>
                      <variable name="Cue_PID"/>
                    </ProcedureCall>
                  </CatchSequence>
                </TryStep>
              </TestStep>
              <TestStep id="_2TJ0" name="Verify VES bitrate in analyser">
                <SetGlobalStep id="_2TLJ" varname="ConfiguredBitRate">
                  <default>$[$(VES_bitrate$(i))*.001]</default>
                </SetGlobalStep>
                <ProcedureCall id="_2TLK"
                               procedure="Tools.AnalyzerTools.Output_Bitrate_Exist"
                               retvarname="video_bit_rate_fallbck_1$(i)">
                  <variable name="Multicast_IP">$(ip_multicast)</variable>
                  <variable name="Udp_Port">$(udp)</variable>
                  <variable name="Audio_PID"/>
                  <variable name="Video_PID">$(video_pid_1)</variable>
                </ProcedureCall>
                <ProcedureCall id="_2TLL"
                               procedure="Miscellaneous.Bitrate_Check">
                  <variable name="Configured_Bitrate">$(ConfiguredBitRate)</variable>
                  <variable name="Percentage_Variance">10</variable>
                  <variable name="Actual_Bitrate">$(video_bit_rate_fallbck_1$(i))</variable>
                </ProcedureCall>
              </TestStep>
            </TestStep>
          </RepeatSequence>
        </Test>
        <TestStep id="_2BA7" name="Thumbnail_Verification">
          <ProcedureCall id="_2BA8"
                         procedure="GUI.Thumbnail.CBR.Thumbnail_Check"
                         retvarname="return">
            <variable name="Group_Name">$(group_id)</variable>
            <variable name="Mux_Type">MAIN</variable>
          </ProcedureCall>
          <IfSequence id="_2BA9" test="$(return) == 1">
            <ProcedureCall id="_2B9f" procedure="Miscellaneous.Test_Comment">
              <variable name="message">Thumbnail Verified</variable>
            </ProcedureCall>
          </IfSequence>
        </TestStep>
      </Test>
    </TestCase>
  </TestSet>
  <TestSet disabled="true" id="_24B4" name="Cleaning the ME-7000 at the end">
    <TestCase id="_25W5" name="Negative Testing">
      <TestStep id="_25ON" name="Disable/Un-check VES bit rate">
        <ProcedureCall id="_2BA-"
                       procedure="GUI.ProcessingTab.Select_Processing_Tab"/>
        <ProcedureCall id="_2BB0"
                       procedure="GUI.ProcessingTab.Select_Output_Mux">
          <variable name="muxid">$(altermuxid)</variable>
        </ProcedureCall>
        <ProcedureCall id="_2BB1"
                       procedure="GUI.ProcessingTab.Select_Output_Mux">
          <variable name="muxid">$(outputmuxid)</variable>
        </ProcedureCall>
        <ProcedureCall id="_25W1"
                       procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
          <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
          <variable name="MCTF_Strength"/>
          <variable name="Resolution"/>
          <variable name="ScalingType"/>
          <variable name="GOPStructure"/>
          <variable name="I_Frame_Period"/>
          <variable name="VES_Bitrate">Disable</variable>
          <variable name="RateControl"/>
          <variable name="Bandwidth_Reclamation"/>
          <variable name="Profile"/>
          <variable name="Enable_DeBlockingFilter"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_25WC" name="Try to give out of range values 99">
        <comment>Modified script as the VES valid range is 100- 10000 as on me7k.30Rel.6</comment>
        <BasicSequence id="_2TJi" name="Try to give out of range values 99">
          <comment>As per new range (100-10000)
so try to set 99</comment>
          <TryStep id="_25WE">
            <ProcedureCall id="_2B9a"
                           procedure="GUI.ProcessingTab.Select_Output_Mux">
              <variable name="muxid">$(outputmuxid)</variable>
            </ProcedureCall>
            <ProcedureCall id="_25WD"
                           procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
              <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
              <variable name="MCTF_Strength"/>
              <variable name="Resolution"/>
              <variable name="ScalingType"/>
              <variable name="GOPStructure"/>
              <variable name="I_Frame_Period"/>
              <variable name="VES_Bitrate">99</variable>
              <variable name="RateControl"/>
              <variable name="Bandwidth_Reclamation"/>
              <variable name="Profile"/>
              <variable name="Enable_DeBlockingFilter"/>
            </ProcedureCall>
            <CatchSequence exception="TestException" id="_25WL" maxerror="0">
              <ComponentWaiter client="$(client)" component="dialogWarning"
                               id="_2TJf"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonOK35" event="MOUSE_MPRC"
                              id="_2TJg" modifiers="16"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonCancel18" event="MOUSE_MPRC"
                              id="_2TJh" modifiers="16"/>
            </CatchSequence>
          </TryStep>
        </BasicSequence>
        <BasicSequence id="_2TJu" name="Check the value 99 set or not">
          <ProcedureCall id="_2TK4"
                         procedure="GUI.ProcessingTab.Grooming_Definitions.Get_Video_Properties"
                         retvarname="value">
            <variable name="Column_Name">Video_Elementary_Stream_Bit_Rate</variable>
            <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
            <variable name="output_mux_id">$(outputmuxid)</variable>
            <variable name="Group_Name"/>
            <variable name="Program_Number"/>
          </ProcedureCall>
          <IfSequence id="_2TK5" test="&#34;$(value)&#34; != &#34;99&#34;">
            <ProcedureCall id="_2TK6" procedure="Miscellaneous.Test_Comment">
              <variable name="message">value not set</variable>
            </ProcedureCall>
            <ElseSequence id="_2TK7">
              <ProcedureCall id="_2TK8" procedure="Miscellaneous.QFT.Fail_TC">
                <variable name="fail_message">out of range value set</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
        </BasicSequence>
      </TestStep>
      <TestStep id="_25WX" name="Try to give out of range values 10001">
        <BasicSequence id="_2TK9"
                       name="Try to give out of range values 10001">
          <comment>As per new range (500-14000)
so try to set 499</comment>
          <TryStep id="_25WY">
            <ProcedureCall id="_2BAE"
                           procedure="GUI.ProcessingTab.Select_Output_Mux">
              <variable name="muxid">$(outputmuxid)</variable>
            </ProcedureCall>
            <ProcedureCall id="_25WZ"
                           procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
              <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
              <variable name="MCTF_Strength"/>
              <variable name="Resolution"/>
              <variable name="ScalingType"/>
              <variable name="GOPStructure"/>
              <variable name="I_Frame_Period"/>
              <variable name="VES_Bitrate">10001</variable>
              <variable name="RateControl"/>
              <variable name="Bandwidth_Reclamation"/>
              <variable name="Profile"/>
              <variable name="Enable_DeBlockingFilter"/>
            </ProcedureCall>
            <CatchSequence exception="TestException" id="_25Wa" maxerror="0">
              <ComponentWaiter client="$(client)" component="dialogWarning"
                               id="_2TLG"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonOK35" event="MOUSE_MPRC"
                              id="_2TLH" modifiers="16"/>
              <MouseEventStep clicks="1" client="$(client)"
                              component="buttonCancel18" event="MOUSE_MPRC"
                              id="_2TLI" modifiers="16"/>
            </CatchSequence>
          </TryStep>
        </BasicSequence>
        <BasicSequence id="_2TKO" name="Check the value 10001 set or not">
          <ProcedureCall id="_2TKP"
                         procedure="GUI.ProcessingTab.Grooming_Definitions.Get_Video_Properties"
                         retvarname="value">
            <variable name="Column_Name">Video_Elementary_Stream_Bit_Rate</variable>
            <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
            <variable name="output_mux_id">$(outputmuxid)</variable>
            <variable name="Group_Name"/>
            <variable name="Program_Number"/>
          </ProcedureCall>
          <IfSequence id="_2TKQ" test="&#34;$(value)&#34; != &#34;10001&#34;">
            <ProcedureCall id="_2TKR" procedure="Miscellaneous.Test_Comment">
              <variable name="message">value not set</variable>
            </ProcedureCall>
            <ElseSequence id="_2TKS">
              <ProcedureCall id="_2TKT" procedure="Miscellaneous.QFT.Fail_TC">
                <variable name="fail_message">out of range value set</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
        </BasicSequence>
      </TestStep>
      <TestStep id="_25Wf"
                name="Switch rate control setting from CBR to CF-CBR">
        <BasicSequence id="_2TKU"
                       name="Switch rate control setting from CBR to CF-CBR">
          <comment>As per new range (500-14000)
so try to set 499</comment>
          <ProcedureCall id="_2BAF"
                         procedure="GUI.ProcessingTab.Select_Output_Mux">
            <variable name="muxid">$(outputmuxid)</variable>
          </ProcedureCall>
          <ProcedureCall id="_25XE"
                         procedure="GUI.ProcessingTab.Grooming_Definitions.Edit_Video_Encoding_Properties">
            <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
            <variable name="MCTF_Strength"/>
            <variable name="Resolution"/>
            <variable name="ScalingType"/>
            <variable name="GOPStructure"/>
            <variable name="I_Frame_Period"/>
            <variable name="VES_Bitrate"/>
            <variable name="RateControl">Constrained Fidelity CBR</variable>
            <variable name="Bandwidth_Reclamation"/>
            <variable name="Profile"/>
            <variable name="Enable_DeBlockingFilter"/>
            <variable name="Alpha_Offset"/>
            <variable name="Beta_Offset"/>
            <variable name="IDR_Frequency"/>
            <variable name="I_Picture(s)"/>
            <variable name="Overlay_Text"/>
            <variable name="Decoder_Delay"/>
            <variable name="Enable_AU_Descriptors"/>
            <variable name="Enable_RAP"/>
            <variable name="Enable_Gaps_in_Frame_Numbers"/>
            <variable name="Enable_Avail_Start/End_IDRs"/>
            <variable name="Enable_Avail_Periodic_IDRs"/>
            <variable name="Avail_Periodic_IDRs"/>
            <variable name="AFD"/>
            <variable name="Frame_Size"/>
            <variable name="Aspect_Ratio"/>
            <variable name="Enable_CC"/>
            <variable name="Enable_Missing_Alarm"/>
            <variable name="Specify_Language"/>
            <variable name="Descriptor_Language"/>
          </ProcedureCall>
        </BasicSequence>
        <BasicSequence id="_2TKd" name="Check the CF-CBR set ot not">
          <ProcedureCall id="_2TKe"
                         procedure="GUI.ProcessingTab.Grooming_Definitions.Get_Video_Properties"
                         retvarname="rate">
            <variable name="Column_Name">Rate_Control</variable>
            <variable name="In_PID">$(SDI_Video_IN_PID)</variable>
            <variable name="output_mux_id">$(outputmuxid)</variable>
            <variable name="Group_Name"/>
            <variable name="Program_Number"/>
          </ProcedureCall>
          <IfSequence id="_2TKf"
                      test="&#34;$(rate)&#34; == &#34;Constrained Fidelity CBR&#34;">
            <ProcedureCall id="_2TKg" procedure="Miscellaneous.Test_Comment">
              <variable name="message">value set</variable>
            </ProcedureCall>
            <ElseSequence id="_2TKh">
              <ProcedureCall id="_2TKi" procedure="Miscellaneous.QFT.Fail_TC">
                <variable name="fail_message">value not set</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
        </BasicSequence>
      </TestStep>
    </TestCase>
    <TestCase id="_2B9L" name="Clean the Database">
      <Test id="_2BB3" name="Delete Output group">
        <ProcedureCall id="_2BB4"
                       procedure="GUI.ProcessingTab.Delete_Grooming_Definition">
          <variable name="Output_Line">$(output_port)</variable>
          <variable name="Output_Mux_ID">$(outputmuxid)</variable>
          <variable name="Delete_Primary_Grooming">Yes</variable>
          <variable name="Delete_Backup1_Grooming"/>
          <variable name="Delete_Backup2_Grooming"/>
        </ProcedureCall>
        <ProcedureCall id="_2BB5" procedure="GUI.Sleep">
          <variable name="Time(Sec)">60</variable>
        </ProcedureCall>
        <ProcedureCall id="_2BB6"
                       procedure="GUI.Output Groups.CBR.Delete_Group">
          <variable name="Main_MuxID">$(outmuxID)</variable>
        </ProcedureCall>
      </Test>
      <Test id="_2BB7" name="Disabling SDI on ME">
        <ProcedureCall id="_2BB8"
                       procedure="GUI.MuxTab.Enable_SDI_Configuration">
          <variable name="Enable_Config_Line">Disable</variable>
          <variable name="Input_Line">$(SDI_input_port)</variable>
          <variable name="Board">$(SDI_Board)</variable>
          <variable name="Video_Format"/>
          <variable name="InputClosedCaption"/>
          <variable name="SCTE104_Extraction"/>
        </ProcedureCall>
        <TryStep id="_2BB9">
          <MouseEventStep clicks="1" client="$(client)"
                          component="buttonApply13" event="MOUSE_MPRC"
                          id="_2BBA" modifiers="16"/>
          <CatchSequence exception="TestException" id="_2BBB" maxerror="0"/>
        </TryStep>
      </Test>
    </TestCase>
    <TestCase id="_24B7" name="Closing the ME-7000">
      <ProcedureCall id="_24B8" procedure="GUI.Clean_Up"/>
    </TestCase>
  </TestSet>
  <PackageRoot id="_3"/>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
